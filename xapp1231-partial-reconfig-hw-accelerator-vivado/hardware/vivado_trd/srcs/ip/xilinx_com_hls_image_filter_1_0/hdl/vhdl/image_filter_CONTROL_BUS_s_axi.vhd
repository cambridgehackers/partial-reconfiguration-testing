-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2014.4
-- Copyright (C) 2014 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library IEEE;
use IEEE.STD_LOGIC_1164.all;
use IEEE.NUMERIC_STD.all;

entity image_filter_CONTROL_BUS_s_axi is
    generic (
        C_ADDR_WIDTH    : INTEGER := 8;
        C_DATA_WIDTH    : INTEGER := 32);
    port (
        -- axi4 lite slave signals
        ACLK                  :in   STD_LOGIC;
        ARESET                :in   STD_LOGIC;
        ACLK_EN               :in   STD_LOGIC;
        AWADDR                :in   STD_LOGIC_VECTOR(C_ADDR_WIDTH-1 downto 0);
        AWVALID               :in   STD_LOGIC;
        AWREADY               :out  STD_LOGIC;
        WDATA                 :in   STD_LOGIC_VECTOR(C_DATA_WIDTH-1 downto 0);
        WSTRB                 :in   STD_LOGIC_VECTOR(C_DATA_WIDTH/8-1 downto 0);
        WVALID                :in   STD_LOGIC;
        WREADY                :out  STD_LOGIC;
        BRESP                 :out  STD_LOGIC_VECTOR(1 downto 0);
        BVALID                :out  STD_LOGIC;
        BREADY                :in   STD_LOGIC;
        ARADDR                :in   STD_LOGIC_VECTOR(C_ADDR_WIDTH-1 downto 0);
        ARVALID               :in   STD_LOGIC;
        ARREADY               :out  STD_LOGIC;
        RDATA                 :out  STD_LOGIC_VECTOR(C_DATA_WIDTH-1 downto 0);
        RRESP                 :out  STD_LOGIC_VECTOR(1 downto 0);
        RVALID                :out  STD_LOGIC;
        RREADY                :in   STD_LOGIC;
        interrupt             :out  STD_LOGIC;
        -- user signals
        rows                  :out  STD_LOGIC_VECTOR(31 downto 0);
        cols                  :out  STD_LOGIC_VECTOR(31 downto 0);
        ap_start              :out  STD_LOGIC;
        ap_done               :in   STD_LOGIC;
        ap_ready              :in   STD_LOGIC;
        ap_idle               :in   STD_LOGIC;
        C_XR0C0               :out  STD_LOGIC_VECTOR(31 downto 0);
        C_XR0C1               :out  STD_LOGIC_VECTOR(31 downto 0);
        C_XR0C2               :out  STD_LOGIC_VECTOR(31 downto 0);
        C_XR1C0               :out  STD_LOGIC_VECTOR(31 downto 0);
        C_XR1C1               :out  STD_LOGIC_VECTOR(31 downto 0);
        C_XR1C2               :out  STD_LOGIC_VECTOR(31 downto 0);
        C_XR2C0               :out  STD_LOGIC_VECTOR(31 downto 0);
        C_XR2C1               :out  STD_LOGIC_VECTOR(31 downto 0);
        C_XR2C2               :out  STD_LOGIC_VECTOR(31 downto 0);
        C_YR0C0               :out  STD_LOGIC_VECTOR(31 downto 0);
        C_YR0C1               :out  STD_LOGIC_VECTOR(31 downto 0);
        C_YR0C2               :out  STD_LOGIC_VECTOR(31 downto 0);
        C_YR1C0               :out  STD_LOGIC_VECTOR(31 downto 0);
        C_YR1C1               :out  STD_LOGIC_VECTOR(31 downto 0);
        C_YR1C2               :out  STD_LOGIC_VECTOR(31 downto 0);
        C_YR2C0               :out  STD_LOGIC_VECTOR(31 downto 0);
        C_YR2C1               :out  STD_LOGIC_VECTOR(31 downto 0);
        C_YR2C2               :out  STD_LOGIC_VECTOR(31 downto 0);
        c_high_thresh         :out  STD_LOGIC_VECTOR(31 downto 0);
        c_low_thresh          :out  STD_LOGIC_VECTOR(31 downto 0);
        c_invert              :out  STD_LOGIC_VECTOR(31 downto 0));
end entity image_filter_CONTROL_BUS_s_axi;

--------------------------Address Info-------------------
-- 0x00 : Control signals
--        bit 0  - ap_start (Read/Write/COH)
--        bit 1  - ap_done (Read/COR)
--        bit 2  - ap_idle (Read)
--        bit 3  - ap_ready (Read)
--        bit 7  - auto_restart (Read/Write)
--        others - reserved
-- 0x04 : Global Interrupt Enable Register
--        bit 0  - Global Interrupt Enable (Read/Write)
--        others - reserved
-- 0x08 : IP Interrupt Enable Register (Read/Write)
--        bit 0  - Channel 0 (ap_done)
--        bit 1  - Channel 1 (ap_ready)
--        others - reserved
-- 0x0c : IP Interrupt Status Register (Read/TOW)
--        bit 0  - Channel 0 (ap_done)
--        bit 1  - Channel 1 (ap_ready)
--        others - reserved
-- 0x14 : Data signal of rows
--        bit 31~0 - rows[31:0] (Read/Write)
-- 0x18 : reserved
-- 0x1c : Data signal of cols
--        bit 31~0 - cols[31:0] (Read/Write)
-- 0x20 : reserved
-- 0x24 : Data signal of C_XR0C0
--        bit 31~0 - C_XR0C0[31:0] (Read/Write)
-- 0x28 : reserved
-- 0x2c : Data signal of C_XR0C1
--        bit 31~0 - C_XR0C1[31:0] (Read/Write)
-- 0x30 : reserved
-- 0x34 : Data signal of C_XR0C2
--        bit 31~0 - C_XR0C2[31:0] (Read/Write)
-- 0x38 : reserved
-- 0x3c : Data signal of C_XR1C0
--        bit 31~0 - C_XR1C0[31:0] (Read/Write)
-- 0x40 : reserved
-- 0x44 : Data signal of C_XR1C1
--        bit 31~0 - C_XR1C1[31:0] (Read/Write)
-- 0x48 : reserved
-- 0x4c : Data signal of C_XR1C2
--        bit 31~0 - C_XR1C2[31:0] (Read/Write)
-- 0x50 : reserved
-- 0x54 : Data signal of C_XR2C0
--        bit 31~0 - C_XR2C0[31:0] (Read/Write)
-- 0x58 : reserved
-- 0x5c : Data signal of C_XR2C1
--        bit 31~0 - C_XR2C1[31:0] (Read/Write)
-- 0x60 : reserved
-- 0x64 : Data signal of C_XR2C2
--        bit 31~0 - C_XR2C2[31:0] (Read/Write)
-- 0x68 : reserved
-- 0x6c : Data signal of C_YR0C0
--        bit 31~0 - C_YR0C0[31:0] (Read/Write)
-- 0x70 : reserved
-- 0x74 : Data signal of C_YR0C1
--        bit 31~0 - C_YR0C1[31:0] (Read/Write)
-- 0x78 : reserved
-- 0x7c : Data signal of C_YR0C2
--        bit 31~0 - C_YR0C2[31:0] (Read/Write)
-- 0x80 : reserved
-- 0x84 : Data signal of C_YR1C0
--        bit 31~0 - C_YR1C0[31:0] (Read/Write)
-- 0x88 : reserved
-- 0x8c : Data signal of C_YR1C1
--        bit 31~0 - C_YR1C1[31:0] (Read/Write)
-- 0x90 : reserved
-- 0x94 : Data signal of C_YR1C2
--        bit 31~0 - C_YR1C2[31:0] (Read/Write)
-- 0x98 : reserved
-- 0x9c : Data signal of C_YR2C0
--        bit 31~0 - C_YR2C0[31:0] (Read/Write)
-- 0xa0 : reserved
-- 0xa4 : Data signal of C_YR2C1
--        bit 31~0 - C_YR2C1[31:0] (Read/Write)
-- 0xa8 : reserved
-- 0xac : Data signal of C_YR2C2
--        bit 31~0 - C_YR2C2[31:0] (Read/Write)
-- 0xb0 : reserved
-- 0xb4 : Data signal of c_high_thresh
--        bit 31~0 - c_high_thresh[31:0] (Read/Write)
-- 0xb8 : reserved
-- 0xbc : Data signal of c_low_thresh
--        bit 31~0 - c_low_thresh[31:0] (Read/Write)
-- 0xc0 : reserved
-- 0xc4 : Data signal of c_invert
--        bit 31~0 - c_invert[31:0] (Read/Write)
-- 0xc8 : reserved
-- (SC = Self Clear, COR = Clear on Read, TOW = Toggle on Write, COH = Clear on Handshake)

architecture behave of image_filter_CONTROL_BUS_s_axi is
    constant ADDR_BITS          : INTEGER   := 8;
    constant ADDR_AP_CTRL : INTEGER :=16#00#;
    constant ADDR_GIE : INTEGER :=16#04#;
    constant ADDR_IER : INTEGER :=16#08#;
    constant ADDR_ISR : INTEGER :=16#0c#;
    constant ADDR_ROWS_DATA_0 : INTEGER :=16#14#;
    constant ADDR_ROWS_CTRL : INTEGER :=16#18#;
    constant ADDR_COLS_DATA_0 : INTEGER :=16#1c#;
    constant ADDR_COLS_CTRL : INTEGER :=16#20#;
    constant ADDR_C_XR0C0_DATA_0 : INTEGER :=16#24#;
    constant ADDR_C_XR0C0_CTRL : INTEGER :=16#28#;
    constant ADDR_C_XR0C1_DATA_0 : INTEGER :=16#2c#;
    constant ADDR_C_XR0C1_CTRL : INTEGER :=16#30#;
    constant ADDR_C_XR0C2_DATA_0 : INTEGER :=16#34#;
    constant ADDR_C_XR0C2_CTRL : INTEGER :=16#38#;
    constant ADDR_C_XR1C0_DATA_0 : INTEGER :=16#3c#;
    constant ADDR_C_XR1C0_CTRL : INTEGER :=16#40#;
    constant ADDR_C_XR1C1_DATA_0 : INTEGER :=16#44#;
    constant ADDR_C_XR1C1_CTRL : INTEGER :=16#48#;
    constant ADDR_C_XR1C2_DATA_0 : INTEGER :=16#4c#;
    constant ADDR_C_XR1C2_CTRL : INTEGER :=16#50#;
    constant ADDR_C_XR2C0_DATA_0 : INTEGER :=16#54#;
    constant ADDR_C_XR2C0_CTRL : INTEGER :=16#58#;
    constant ADDR_C_XR2C1_DATA_0 : INTEGER :=16#5c#;
    constant ADDR_C_XR2C1_CTRL : INTEGER :=16#60#;
    constant ADDR_C_XR2C2_DATA_0 : INTEGER :=16#64#;
    constant ADDR_C_XR2C2_CTRL : INTEGER :=16#68#;
    constant ADDR_C_YR0C0_DATA_0 : INTEGER :=16#6c#;
    constant ADDR_C_YR0C0_CTRL : INTEGER :=16#70#;
    constant ADDR_C_YR0C1_DATA_0 : INTEGER :=16#74#;
    constant ADDR_C_YR0C1_CTRL : INTEGER :=16#78#;
    constant ADDR_C_YR0C2_DATA_0 : INTEGER :=16#7c#;
    constant ADDR_C_YR0C2_CTRL : INTEGER :=16#80#;
    constant ADDR_C_YR1C0_DATA_0 : INTEGER :=16#84#;
    constant ADDR_C_YR1C0_CTRL : INTEGER :=16#88#;
    constant ADDR_C_YR1C1_DATA_0 : INTEGER :=16#8c#;
    constant ADDR_C_YR1C1_CTRL : INTEGER :=16#90#;
    constant ADDR_C_YR1C2_DATA_0 : INTEGER :=16#94#;
    constant ADDR_C_YR1C2_CTRL : INTEGER :=16#98#;
    constant ADDR_C_YR2C0_DATA_0 : INTEGER :=16#9c#;
    constant ADDR_C_YR2C0_CTRL : INTEGER :=16#a0#;
    constant ADDR_C_YR2C1_DATA_0 : INTEGER :=16#a4#;
    constant ADDR_C_YR2C1_CTRL : INTEGER :=16#a8#;
    constant ADDR_C_YR2C2_DATA_0 : INTEGER :=16#ac#;
    constant ADDR_C_YR2C2_CTRL : INTEGER :=16#b0#;
    constant ADDR_C_HIGH_THRESH_DATA_0 : INTEGER :=16#b4#;
    constant ADDR_C_HIGH_THRESH_CTRL : INTEGER :=16#b8#;
    constant ADDR_C_LOW_THRESH_DATA_0 : INTEGER :=16#bc#;
    constant ADDR_C_LOW_THRESH_CTRL : INTEGER :=16#c0#;
    constant ADDR_C_INVERT_DATA_0 : INTEGER :=16#c4#;
    constant ADDR_C_INVERT_CTRL : INTEGER :=16#c8#;
    type states is (wridle, wrdata, wrresp, rdidle, rddata);  -- read and write FSM states
    signal wstate, wnext, rstate, rnext: states;
    -- Local signal
    signal waddr               : UNSIGNED(ADDR_BITS-1 downto 0);
    signal wmask               : UNSIGNED(31 downto 0);
    signal aw_hs               : STD_LOGIC;
    signal w_hs                : STD_LOGIC;
    signal rdata_data          : UNSIGNED(31 downto 0);
    signal ar_hs               : STD_LOGIC;
    signal raddr               : UNSIGNED(ADDR_BITS-1 downto 0);
    signal AWREADY_t           : STD_LOGIC;
    signal WREADY_t            : STD_LOGIC;
    signal ARREADY_t           : STD_LOGIC;
    signal RVALID_t            : STD_LOGIC;
    -- internal registers
    signal int_ap_idle         : STD_LOGIC;
    signal int_ap_ready        : STD_LOGIC;
    signal int_ap_done         : STD_LOGIC;
    signal int_ap_start        : STD_LOGIC;
    signal int_auto_restart    : STD_LOGIC;
    signal int_gie             : STD_LOGIC;
    signal int_ier             : UNSIGNED(1 downto 0);
    signal int_isr             : UNSIGNED(1 downto 0);
    signal int_rows            : UNSIGNED(31 downto 0);
    signal int_cols            : UNSIGNED(31 downto 0);
    signal int_C_XR0C0         : UNSIGNED(31 downto 0);
    signal int_C_XR0C1         : UNSIGNED(31 downto 0);
    signal int_C_XR0C2         : UNSIGNED(31 downto 0);
    signal int_C_XR1C0         : UNSIGNED(31 downto 0);
    signal int_C_XR1C1         : UNSIGNED(31 downto 0);
    signal int_C_XR1C2         : UNSIGNED(31 downto 0);
    signal int_C_XR2C0         : UNSIGNED(31 downto 0);
    signal int_C_XR2C1         : UNSIGNED(31 downto 0);
    signal int_C_XR2C2         : UNSIGNED(31 downto 0);
    signal int_C_YR0C0         : UNSIGNED(31 downto 0);
    signal int_C_YR0C1         : UNSIGNED(31 downto 0);
    signal int_C_YR0C2         : UNSIGNED(31 downto 0);
    signal int_C_YR1C0         : UNSIGNED(31 downto 0);
    signal int_C_YR1C1         : UNSIGNED(31 downto 0);
    signal int_C_YR1C2         : UNSIGNED(31 downto 0);
    signal int_C_YR2C0         : UNSIGNED(31 downto 0);
    signal int_C_YR2C1         : UNSIGNED(31 downto 0);
    signal int_C_YR2C2         : UNSIGNED(31 downto 0);
    signal int_c_high_thresh   : UNSIGNED(31 downto 0);
    signal int_c_low_thresh    : UNSIGNED(31 downto 0);
    signal int_c_invert        : UNSIGNED(31 downto 0);

begin
    -- axi write
    AWREADY_t <=  '1' when wstate = wridle else '0';
    AWREADY   <=  AWREADY_t;
    WREADY_t  <=  '1' when wstate = wrdata else '0';
    WREADY    <=  WREADY_t;
    BRESP     <=  "00";  -- OKAY
    BVALID    <=  '1' when wstate = wrresp else '0';
    wmask     <=  (31 downto 24 => WSTRB(3), 23 downto 16 => WSTRB(2), 15 downto 8 => WSTRB(1), 7 downto 0 => WSTRB(0));
    aw_hs     <=  AWVALID and AWREADY_t;
    w_hs      <=  WVALID and WREADY_t;

    -- write FSM
    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') and ACLK_EN = '1' then
            if (ARESET = '1') then
                wstate <= wridle;
            else
                wstate <= wnext;
            end if;
        end if;
    end process;

    process (wstate, AWVALID, WVALID, BREADY)
    begin
        case (wstate) is
        when wridle =>
            if (AWVALID = '1') then
                wnext <= wrdata;
            else
                wnext <= wridle;
            end if;
        when wrdata =>
            if (WVALID = '1') then
                wnext <= wrresp;
            else
                wnext <= wrdata;
            end if;
        when wrresp =>
            if (BREADY = '1') then
                wnext <= wridle;
            else
                wnext <= wrresp;
            end if;
        when others =>
            wnext <= wridle;
        end case;
    end process;

    waddr_proc : process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') and ACLK_EN = '1' then
            if (aw_hs = '1') then
                waddr <= UNSIGNED(AWADDR(ADDR_BITS-1 downto 0));
            end if;
        end if;
    end process;

    -- axi read
    ARREADY_t <= '1' when (rstate = rdidle) else '0';
    ARREADY <= ARREADY_t;
    RDATA   <= STD_LOGIC_VECTOR(rdata_data);
    RRESP   <= "00";  -- OKAY
    RVALID_t  <= '1' when (rstate = rddata) else '0';
    RVALID    <= RVALID_t;
    ar_hs   <= ARVALID and ARREADY_t;
    raddr   <= UNSIGNED(ARADDR(ADDR_BITS-1 downto 0));

    -- read FSM
    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') and ACLK_EN = '1' then
            if (ARESET = '1') then
                rstate <= rdidle;
            else
                rstate <= rnext;
            end if;
        end if;
    end process;

    process (rstate, ARVALID, RREADY, RVALID_t)
    begin
        case (rstate) is
        when rdidle =>
            if (ARVALID = '1') then
                rnext <= rddata;
            else
                rnext <= rdidle;
            end if;
        when rddata =>
            if (RREADY = '1' and RVALID_t = '1') then
                rnext <= rdidle;
            else
                rnext <= rddata;
            end if;
        when others =>
            rnext <= rdidle;
        end case;
    end process;

    rdata_proc : process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') and ACLK_EN = '1' then
            if (ar_hs = '1') then
                case (TO_INTEGER(raddr)) is
                when ADDR_AP_CTRL =>
                    rdata_data <= (7 => int_auto_restart, 3 => int_ap_ready, 2 => int_ap_idle, 1 => int_ap_done, 0 => int_ap_start, others => '0');
                when ADDR_GIE =>
                    rdata_data <= (1 => int_gie, others => '0');
                when ADDR_IER =>
                    rdata_data <= (2 => int_ier(1), 1 => int_ier(0), others => '0');
                when ADDR_ISR =>
                    rdata_data <= (2 => int_isr(1), 1 => int_isr(0), others => '0');
                when ADDR_ROWS_DATA_0 =>
                    rdata_data <= RESIZE(int_rows(31 downto 0), 32);
                when ADDR_COLS_DATA_0 =>
                    rdata_data <= RESIZE(int_cols(31 downto 0), 32);
                when ADDR_C_XR0C0_DATA_0 =>
                    rdata_data <= RESIZE(int_C_XR0C0(31 downto 0), 32);
                when ADDR_C_XR0C1_DATA_0 =>
                    rdata_data <= RESIZE(int_C_XR0C1(31 downto 0), 32);
                when ADDR_C_XR0C2_DATA_0 =>
                    rdata_data <= RESIZE(int_C_XR0C2(31 downto 0), 32);
                when ADDR_C_XR1C0_DATA_0 =>
                    rdata_data <= RESIZE(int_C_XR1C0(31 downto 0), 32);
                when ADDR_C_XR1C1_DATA_0 =>
                    rdata_data <= RESIZE(int_C_XR1C1(31 downto 0), 32);
                when ADDR_C_XR1C2_DATA_0 =>
                    rdata_data <= RESIZE(int_C_XR1C2(31 downto 0), 32);
                when ADDR_C_XR2C0_DATA_0 =>
                    rdata_data <= RESIZE(int_C_XR2C0(31 downto 0), 32);
                when ADDR_C_XR2C1_DATA_0 =>
                    rdata_data <= RESIZE(int_C_XR2C1(31 downto 0), 32);
                when ADDR_C_XR2C2_DATA_0 =>
                    rdata_data <= RESIZE(int_C_XR2C2(31 downto 0), 32);
                when ADDR_C_YR0C0_DATA_0 =>
                    rdata_data <= RESIZE(int_C_YR0C0(31 downto 0), 32);
                when ADDR_C_YR0C1_DATA_0 =>
                    rdata_data <= RESIZE(int_C_YR0C1(31 downto 0), 32);
                when ADDR_C_YR0C2_DATA_0 =>
                    rdata_data <= RESIZE(int_C_YR0C2(31 downto 0), 32);
                when ADDR_C_YR1C0_DATA_0 =>
                    rdata_data <= RESIZE(int_C_YR1C0(31 downto 0), 32);
                when ADDR_C_YR1C1_DATA_0 =>
                    rdata_data <= RESIZE(int_C_YR1C1(31 downto 0), 32);
                when ADDR_C_YR1C2_DATA_0 =>
                    rdata_data <= RESIZE(int_C_YR1C2(31 downto 0), 32);
                when ADDR_C_YR2C0_DATA_0 =>
                    rdata_data <= RESIZE(int_C_YR2C0(31 downto 0), 32);
                when ADDR_C_YR2C1_DATA_0 =>
                    rdata_data <= RESIZE(int_C_YR2C1(31 downto 0), 32);
                when ADDR_C_YR2C2_DATA_0 =>
                    rdata_data <= RESIZE(int_C_YR2C2(31 downto 0), 32);
                when ADDR_C_HIGH_THRESH_DATA_0 =>
                    rdata_data <= RESIZE(int_c_high_thresh(31 downto 0), 32);
                when ADDR_C_LOW_THRESH_DATA_0 =>
                    rdata_data <= RESIZE(int_c_low_thresh(31 downto 0), 32);
                when ADDR_C_INVERT_DATA_0 =>
                    rdata_data <= RESIZE(int_c_invert(31 downto 0), 32);
                when others =>
                    rdata_data <= (others => '0');
                end case;
            end if;
        end if;
    end process;

    -- internal registers
    interrupt <= int_gie and (int_isr(0) or int_isr(1));
    ap_start <= int_ap_start;
    int_ap_idle <= ap_idle;
    int_ap_ready <= ap_ready;
    rows <= STD_LOGIC_VECTOR(int_rows);
    cols <= STD_LOGIC_VECTOR(int_cols);
    C_XR0C0 <= STD_LOGIC_VECTOR(int_C_XR0C0);
    C_XR0C1 <= STD_LOGIC_VECTOR(int_C_XR0C1);
    C_XR0C2 <= STD_LOGIC_VECTOR(int_C_XR0C2);
    C_XR1C0 <= STD_LOGIC_VECTOR(int_C_XR1C0);
    C_XR1C1 <= STD_LOGIC_VECTOR(int_C_XR1C1);
    C_XR1C2 <= STD_LOGIC_VECTOR(int_C_XR1C2);
    C_XR2C0 <= STD_LOGIC_VECTOR(int_C_XR2C0);
    C_XR2C1 <= STD_LOGIC_VECTOR(int_C_XR2C1);
    C_XR2C2 <= STD_LOGIC_VECTOR(int_C_XR2C2);
    C_YR0C0 <= STD_LOGIC_VECTOR(int_C_YR0C0);
    C_YR0C1 <= STD_LOGIC_VECTOR(int_C_YR0C1);
    C_YR0C2 <= STD_LOGIC_VECTOR(int_C_YR0C2);
    C_YR1C0 <= STD_LOGIC_VECTOR(int_C_YR1C0);
    C_YR1C1 <= STD_LOGIC_VECTOR(int_C_YR1C1);
    C_YR1C2 <= STD_LOGIC_VECTOR(int_C_YR1C2);
    C_YR2C0 <= STD_LOGIC_VECTOR(int_C_YR2C0);
    C_YR2C1 <= STD_LOGIC_VECTOR(int_C_YR2C1);
    C_YR2C2 <= STD_LOGIC_VECTOR(int_C_YR2C2);
    c_high_thresh <= STD_LOGIC_VECTOR(int_c_high_thresh);
    c_low_thresh <= STD_LOGIC_VECTOR(int_c_low_thresh);
    c_invert <= STD_LOGIC_VECTOR(int_c_invert);

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                int_ap_start <= '0';
            elsif (ACLK_EN = '1') then
                if (w_hs = '1' and waddr = ADDR_AP_CTRL and WSTRB(0) = '1' and WDATA(0) = '1') then
                    int_ap_start <= '1';
                elsif (int_ap_ready = '1') then
                    int_ap_start <= int_auto_restart; -- clear on handshake/auto restart
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                int_ap_done <= '0';
            elsif (ACLK_EN = '1') then
                if (ap_done = '1') then
                    int_ap_done <= '1';
                elsif (ar_hs = '1' and raddr = ADDR_AP_CTRL) then
                    int_ap_done <= '0'; -- clear on read
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                int_auto_restart <= '0';
            elsif (ACLK_EN = '1') then
                if (w_hs = '1' and waddr = ADDR_AP_CTRL and WSTRB(0) = '1') then
                    int_auto_restart <= WDATA(7);
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                int_gie <= '0';
            elsif (ACLK_EN = '1') then
                if (w_hs = '1' and waddr = ADDR_GIE and WSTRB(0) = '1') then
                    int_gie <= WDATA(0);
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                int_ier <= "00";
            elsif (ACLK_EN = '1') then
                if (w_hs = '1' and waddr = ADDR_IER and WSTRB(0) = '1') then
                    int_ier <= UNSIGNED(WDATA(1 downto 0));
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                int_isr(0) <= '0';
            elsif (ACLK_EN = '1') then
                if (int_ier(0) = '1' and ap_done = '1') then
                    int_isr(0) <= '1';
                elsif (w_hs = '1' and waddr = ADDR_ISR and WSTRB(0) = '1') then
                    int_isr(0) <= int_isr(0) xor WDATA(0); -- toggle on write
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                int_isr(1) <= '0';
            elsif (ACLK_EN = '1') then
                if (int_ier(1) = '1' and ap_ready = '1') then
                    int_isr(1) <= '1';
                elsif (w_hs = '1' and waddr = ADDR_ISR and WSTRB(0) = '1') then
                    int_isr(1) <= int_isr(1) xor WDATA(1); -- toggle on write
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ACLK_EN = '1') then
                if (w_hs = '1' and waddr = ADDR_ROWS_DATA_0) then
                    int_rows(31 downto 0) <= (UNSIGNED(WDATA(31 downto 0)) and wmask(31 downto 0)) or ((not wmask(31 downto 0)) and int_rows(31 downto 0));
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ACLK_EN = '1') then
                if (w_hs = '1' and waddr = ADDR_COLS_DATA_0) then
                    int_cols(31 downto 0) <= (UNSIGNED(WDATA(31 downto 0)) and wmask(31 downto 0)) or ((not wmask(31 downto 0)) and int_cols(31 downto 0));
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ACLK_EN = '1') then
                if (w_hs = '1' and waddr = ADDR_C_XR0C0_DATA_0) then
                    int_C_XR0C0(31 downto 0) <= (UNSIGNED(WDATA(31 downto 0)) and wmask(31 downto 0)) or ((not wmask(31 downto 0)) and int_C_XR0C0(31 downto 0));
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ACLK_EN = '1') then
                if (w_hs = '1' and waddr = ADDR_C_XR0C1_DATA_0) then
                    int_C_XR0C1(31 downto 0) <= (UNSIGNED(WDATA(31 downto 0)) and wmask(31 downto 0)) or ((not wmask(31 downto 0)) and int_C_XR0C1(31 downto 0));
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ACLK_EN = '1') then
                if (w_hs = '1' and waddr = ADDR_C_XR0C2_DATA_0) then
                    int_C_XR0C2(31 downto 0) <= (UNSIGNED(WDATA(31 downto 0)) and wmask(31 downto 0)) or ((not wmask(31 downto 0)) and int_C_XR0C2(31 downto 0));
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ACLK_EN = '1') then
                if (w_hs = '1' and waddr = ADDR_C_XR1C0_DATA_0) then
                    int_C_XR1C0(31 downto 0) <= (UNSIGNED(WDATA(31 downto 0)) and wmask(31 downto 0)) or ((not wmask(31 downto 0)) and int_C_XR1C0(31 downto 0));
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ACLK_EN = '1') then
                if (w_hs = '1' and waddr = ADDR_C_XR1C1_DATA_0) then
                    int_C_XR1C1(31 downto 0) <= (UNSIGNED(WDATA(31 downto 0)) and wmask(31 downto 0)) or ((not wmask(31 downto 0)) and int_C_XR1C1(31 downto 0));
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ACLK_EN = '1') then
                if (w_hs = '1' and waddr = ADDR_C_XR1C2_DATA_0) then
                    int_C_XR1C2(31 downto 0) <= (UNSIGNED(WDATA(31 downto 0)) and wmask(31 downto 0)) or ((not wmask(31 downto 0)) and int_C_XR1C2(31 downto 0));
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ACLK_EN = '1') then
                if (w_hs = '1' and waddr = ADDR_C_XR2C0_DATA_0) then
                    int_C_XR2C0(31 downto 0) <= (UNSIGNED(WDATA(31 downto 0)) and wmask(31 downto 0)) or ((not wmask(31 downto 0)) and int_C_XR2C0(31 downto 0));
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ACLK_EN = '1') then
                if (w_hs = '1' and waddr = ADDR_C_XR2C1_DATA_0) then
                    int_C_XR2C1(31 downto 0) <= (UNSIGNED(WDATA(31 downto 0)) and wmask(31 downto 0)) or ((not wmask(31 downto 0)) and int_C_XR2C1(31 downto 0));
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ACLK_EN = '1') then
                if (w_hs = '1' and waddr = ADDR_C_XR2C2_DATA_0) then
                    int_C_XR2C2(31 downto 0) <= (UNSIGNED(WDATA(31 downto 0)) and wmask(31 downto 0)) or ((not wmask(31 downto 0)) and int_C_XR2C2(31 downto 0));
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ACLK_EN = '1') then
                if (w_hs = '1' and waddr = ADDR_C_YR0C0_DATA_0) then
                    int_C_YR0C0(31 downto 0) <= (UNSIGNED(WDATA(31 downto 0)) and wmask(31 downto 0)) or ((not wmask(31 downto 0)) and int_C_YR0C0(31 downto 0));
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ACLK_EN = '1') then
                if (w_hs = '1' and waddr = ADDR_C_YR0C1_DATA_0) then
                    int_C_YR0C1(31 downto 0) <= (UNSIGNED(WDATA(31 downto 0)) and wmask(31 downto 0)) or ((not wmask(31 downto 0)) and int_C_YR0C1(31 downto 0));
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ACLK_EN = '1') then
                if (w_hs = '1' and waddr = ADDR_C_YR0C2_DATA_0) then
                    int_C_YR0C2(31 downto 0) <= (UNSIGNED(WDATA(31 downto 0)) and wmask(31 downto 0)) or ((not wmask(31 downto 0)) and int_C_YR0C2(31 downto 0));
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ACLK_EN = '1') then
                if (w_hs = '1' and waddr = ADDR_C_YR1C0_DATA_0) then
                    int_C_YR1C0(31 downto 0) <= (UNSIGNED(WDATA(31 downto 0)) and wmask(31 downto 0)) or ((not wmask(31 downto 0)) and int_C_YR1C0(31 downto 0));
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ACLK_EN = '1') then
                if (w_hs = '1' and waddr = ADDR_C_YR1C1_DATA_0) then
                    int_C_YR1C1(31 downto 0) <= (UNSIGNED(WDATA(31 downto 0)) and wmask(31 downto 0)) or ((not wmask(31 downto 0)) and int_C_YR1C1(31 downto 0));
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ACLK_EN = '1') then
                if (w_hs = '1' and waddr = ADDR_C_YR1C2_DATA_0) then
                    int_C_YR1C2(31 downto 0) <= (UNSIGNED(WDATA(31 downto 0)) and wmask(31 downto 0)) or ((not wmask(31 downto 0)) and int_C_YR1C2(31 downto 0));
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ACLK_EN = '1') then
                if (w_hs = '1' and waddr = ADDR_C_YR2C0_DATA_0) then
                    int_C_YR2C0(31 downto 0) <= (UNSIGNED(WDATA(31 downto 0)) and wmask(31 downto 0)) or ((not wmask(31 downto 0)) and int_C_YR2C0(31 downto 0));
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ACLK_EN = '1') then
                if (w_hs = '1' and waddr = ADDR_C_YR2C1_DATA_0) then
                    int_C_YR2C1(31 downto 0) <= (UNSIGNED(WDATA(31 downto 0)) and wmask(31 downto 0)) or ((not wmask(31 downto 0)) and int_C_YR2C1(31 downto 0));
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ACLK_EN = '1') then
                if (w_hs = '1' and waddr = ADDR_C_YR2C2_DATA_0) then
                    int_C_YR2C2(31 downto 0) <= (UNSIGNED(WDATA(31 downto 0)) and wmask(31 downto 0)) or ((not wmask(31 downto 0)) and int_C_YR2C2(31 downto 0));
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ACLK_EN = '1') then
                if (w_hs = '1' and waddr = ADDR_C_HIGH_THRESH_DATA_0) then
                    int_c_high_thresh(31 downto 0) <= (UNSIGNED(WDATA(31 downto 0)) and wmask(31 downto 0)) or ((not wmask(31 downto 0)) and int_c_high_thresh(31 downto 0));
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ACLK_EN = '1') then
                if (w_hs = '1' and waddr = ADDR_C_LOW_THRESH_DATA_0) then
                    int_c_low_thresh(31 downto 0) <= (UNSIGNED(WDATA(31 downto 0)) and wmask(31 downto 0)) or ((not wmask(31 downto 0)) and int_c_low_thresh(31 downto 0));
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ACLK_EN = '1') then
                if (w_hs = '1' and waddr = ADDR_C_INVERT_DATA_0) then
                    int_c_invert(31 downto 0) <= (UNSIGNED(WDATA(31 downto 0)) and wmask(31 downto 0)) or ((not wmask(31 downto 0)) and int_c_invert(31 downto 0));
                end if;
            end if;
        end if;
    end process;

end architecture behave;
